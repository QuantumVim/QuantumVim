--if #t == 0 then
--                    t = other_mt
--                else
--                    for _, other_value in ipairs(other_mt) do
--                        local is_duplicate = false
--                        for _, pre_value in ipairs(pre_mt) do
--                            if getmetatable(other_value) == keymap.opts_mt and getmetatable(pre_value) == keymap.opts_mt then
--                                if pre_value == other_value then
--                                    is_duplicate = true
--                                end
--                            end
--                        end
--                        if not is_duplicate then
--                            fn_t.rawset_debug(t, #t + 1, other_value, "Opts collection")
--                        end
--                    end
--                end
--    __eq = function(t1, t2)
--
--    end,
--    ---This meta method is called when the opts_mt is indexed
--    ---@param _ table not used
--    ---@param opt string the key corresponding to any of the supported default options
--    ---@return boolean|string|integer|nil
--
--    --__call = function(_, opt)
--    --    if default.valid_keymap_opts[opt] then
--    --        return default.keymap_opts[opt]
--    --    else
--    --        Log:error(string.format("Invalid option '%s' for keymap.", opt))
--    --    end
--    --end,
--    ---Ensures that at least the default options are stored in the table
--    ---end sets user defined values if they are supported
--    ---@param t table
--    ---@param lhs string the left hand side of a keymap
--    ---@param other table the keymap corresponding to the left hand side
--    __newindex = function(t, lhs, other)
--        local lhs_is_string = type(lhs) == "string" and not fn.isempty(lhs)
--        local other_is_table = type(other) == "table" and #other > 0
--        if lhs_is_string then
--            if other_is_table then
--                local opts_are_valid = true
--                local invalid_opts = ""
--                local valid_opts = {}
--                for opt, _ in pairs(other) do
--                    if not default.valid_keymap_opts[opt] then
--                        invalid_opts = invalid_opts .. opt .. ", "
--                        opts_are_valid = false
--                    else
--                        table.insert(valid_opts, opt)
--                    end
--                end
--                if opts_are_valid then
--                    local persistent_options = fn_t.rawget_debug(t, lhs, "keymap_opts") or {}
--                    local user_options = {}
--
--                    if #persistent_options > 0 then
--                        if persistent_options.unique then
--                            user_options = persistent_options
--                            Log:warn(string.format(
--                                "Attempted to override a unique keymap '%s'. Its corresponding options '%s' will be kept.",
--                                lhs,
--                                vim.inspect(persistent_options)))
--                        elseif other.unique then
--                            -- discard duplicated mapping
--                            Log:warn(string.format(
--                                "An existing non-unqiue keymap '%s' was overriden by the options: '%s'.", lhs,
--                                vim.inspect(other)))
--
--                            user_options = setmetatable(other, { __index = keymap.rhs_mt })
--                        else
--                            -- keep both mappings
--                            table.insert(user_options, persistent_options)
--                            table.insert(user_options, other)
--                        end
--                    else
--                        user_options = setmetatable(other, { __index = keymap.rhs_mt })
--                        Log:debug(string.format("A new keybinding from '%s' with the options '%' was detected.", lhs,
--                            vim.inspect(user_options)))
--                    end
--                    fn_t.rawset_debug(t, lhs, user_options,
--                        string.format("Setting keymap options: %s", vim.inspect(user_options)))
--                else
--                    Log:error(string.format("Invalid option '%s' for keymap.", invalid_opts:sub(1, -3)))
--                end
--            else
--                if not type(other) == "table" then
--                    Log:error(string.format(
--                        "Declaring keymap options must be done in a table but got '%s'.",
--                        type(other)))
--                elseif not #other > 0 then
--                    Log:error(string.format(
--                        "Empty table detected. No keymap options were set. Table: '%s'.",
--                        other))
--                end
--            end
--        else
--            if not type(lhs) == "string" then
--                Log:error(string.format("The left hand side of a keymap must be a string but is '%s'.", type(lhs)))
--            end
--            if fn.isempty(lhs) then
--                Log:error(string.format("The left hand side of a keymap is an empty string.", type(lhs)))
--            end
--        end
--    end
--
